{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/foranother/SCLAB_Study/blob/graduated_study/IMDB_LSTM\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "46914784",
      "metadata": {
        "id": "46914784"
      },
      "source": [
        "### 참고문헌\n",
        "- https://wikidocs.net/94748\n",
        "- https://wikidocs.net/48920\n",
        "- https://keras.io/api/datasets/imdb/\n",
        "- https://ai.stanford.edu/~amaas/data/sentiment/"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "id": "5432ada5",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "5432ada5",
        "outputId": "fc199f9a-d508-4115-d555-c03e5923932b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'2.8.0'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "import tensorflow as tf\n",
        "tf.__version__"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "id": "117d20b6",
      "metadata": {
        "id": "117d20b6"
      },
      "outputs": [],
      "source": [
        "from tensorflow.keras.datasets import imdb\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "import collections.abc\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "id": "22ecabdd",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "22ecabdd",
        "outputId": "6d689a7c-4fa2-4347-de0f-cb03d75c1611"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (3.2.2)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (3.0.8)\n",
            "Requirement already satisfied: numpy>=1.11 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (1.21.6)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (2.8.2)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (1.4.2)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (0.11.0)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver>=1.0.1->matplotlib) (4.1.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib) (1.15.0)\n"
          ]
        }
      ],
      "source": [
        "!pip install matplotlib"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "id": "185a2c18",
      "metadata": {
        "id": "185a2c18"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def plot_graphs(history, string):\n",
        "    plt.plot(history.history[string])\n",
        "    plt.plot(history.history['val_'+string], '')\n",
        "    plt.xlabel(\"Epochs\")\n",
        "    plt.ylabel(string)\n",
        "    plt.legend([string, 'val_'+string])\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1497fa7c",
      "metadata": {
        "id": "1497fa7c"
      },
      "source": [
        "### IMDB DATASET\n",
        "\n",
        "<데이터셋 설명>\n",
        "\n",
        "- 영화 리뷰에 대한 데이터 5만 개로 구성되어있음\n",
        "- 훈련 데이터 2만 5000개, 테스트 데이터 2만 5000개 (각각 50%씩 긍정리뷰, 부정리뷰)\n",
        "- 이 데이터는 이미 전처리가 되어있어 각 리뷰가 숫자로 변환되어 있음\n",
        "\n",
        "- 스탠포드 대학교에서 2011년에 낸 논문에서 데이터를 소개했으며, **88.89%**의 정확도를 얻었다고 함\n",
        "\n",
        "<현재 실험에서 사용할 데이터셋>\n",
        "- 최대 단어 개수를 10,000개로 제한하고 훈련 데이터, 테스트 데이터로 불러옴\n",
        "- 이미 정수 인코딩이 된 상태이므로 남은 전처리는 패딩 "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "5499a5be",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5499a5be",
        "outputId": "7e09be43-897b-46ed-d3cf-e4b2bf06215f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb.npz\n",
            "17465344/17464789 [==============================] - 0s 0us/step\n",
            "17473536/17464789 [==============================] - 0s 0us/step\n"
          ]
        }
      ],
      "source": [
        "vocab_size = 10000\n",
        "\n",
        "# x_train, x_test, y_train, y_test\n",
        "(X_train, y_train), (X_test, y_test) = imdb.load_data(num_words=vocab_size)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "id": "06e13a7a",
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "06e13a7a",
        "outputId": "5faf0d14-7700-4035-e59e-174d1df3da65"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([list([1, 14, 22, 16, 43, 530, 973, 1622, 1385, 65, 458, 4468, 66, 3941, 4, 173, 36, 256, 5, 25, 100, 43, 838, 112, 50, 670, 2, 9, 35, 480, 284, 5, 150, 4, 172, 112, 167, 2, 336, 385, 39, 4, 172, 4536, 1111, 17, 546, 38, 13, 447, 4, 192, 50, 16, 6, 147, 2025, 19, 14, 22, 4, 1920, 4613, 469, 4, 22, 71, 87, 12, 16, 43, 530, 38, 76, 15, 13, 1247, 4, 22, 17, 515, 17, 12, 16, 626, 18, 2, 5, 62, 386, 12, 8, 316, 8, 106, 5, 4, 2223, 5244, 16, 480, 66, 3785, 33, 4, 130, 12, 16, 38, 619, 5, 25, 124, 51, 36, 135, 48, 25, 1415, 33, 6, 22, 12, 215, 28, 77, 52, 5, 14, 407, 16, 82, 2, 8, 4, 107, 117, 5952, 15, 256, 4, 2, 7, 3766, 5, 723, 36, 71, 43, 530, 476, 26, 400, 317, 46, 7, 4, 2, 1029, 13, 104, 88, 4, 381, 15, 297, 98, 32, 2071, 56, 26, 141, 6, 194, 7486, 18, 4, 226, 22, 21, 134, 476, 26, 480, 5, 144, 30, 5535, 18, 51, 36, 28, 224, 92, 25, 104, 4, 226, 65, 16, 38, 1334, 88, 12, 16, 283, 5, 16, 4472, 113, 103, 32, 15, 16, 5345, 19, 178, 32]),\n",
              "       list([1, 194, 1153, 194, 8255, 78, 228, 5, 6, 1463, 4369, 5012, 134, 26, 4, 715, 8, 118, 1634, 14, 394, 20, 13, 119, 954, 189, 102, 5, 207, 110, 3103, 21, 14, 69, 188, 8, 30, 23, 7, 4, 249, 126, 93, 4, 114, 9, 2300, 1523, 5, 647, 4, 116, 9, 35, 8163, 4, 229, 9, 340, 1322, 4, 118, 9, 4, 130, 4901, 19, 4, 1002, 5, 89, 29, 952, 46, 37, 4, 455, 9, 45, 43, 38, 1543, 1905, 398, 4, 1649, 26, 6853, 5, 163, 11, 3215, 2, 4, 1153, 9, 194, 775, 7, 8255, 2, 349, 2637, 148, 605, 2, 8003, 15, 123, 125, 68, 2, 6853, 15, 349, 165, 4362, 98, 5, 4, 228, 9, 43, 2, 1157, 15, 299, 120, 5, 120, 174, 11, 220, 175, 136, 50, 9, 4373, 228, 8255, 5, 2, 656, 245, 2350, 5, 4, 9837, 131, 152, 491, 18, 2, 32, 7464, 1212, 14, 9, 6, 371, 78, 22, 625, 64, 1382, 9, 8, 168, 145, 23, 4, 1690, 15, 16, 4, 1355, 5, 28, 6, 52, 154, 462, 33, 89, 78, 285, 16, 145, 95]),\n",
              "       list([1, 14, 47, 8, 30, 31, 7, 4, 249, 108, 7, 4, 5974, 54, 61, 369, 13, 71, 149, 14, 22, 112, 4, 2401, 311, 12, 16, 3711, 33, 75, 43, 1829, 296, 4, 86, 320, 35, 534, 19, 263, 4821, 1301, 4, 1873, 33, 89, 78, 12, 66, 16, 4, 360, 7, 4, 58, 316, 334, 11, 4, 1716, 43, 645, 662, 8, 257, 85, 1200, 42, 1228, 2578, 83, 68, 3912, 15, 36, 165, 1539, 278, 36, 69, 2, 780, 8, 106, 14, 6905, 1338, 18, 6, 22, 12, 215, 28, 610, 40, 6, 87, 326, 23, 2300, 21, 23, 22, 12, 272, 40, 57, 31, 11, 4, 22, 47, 6, 2307, 51, 9, 170, 23, 595, 116, 595, 1352, 13, 191, 79, 638, 89, 2, 14, 9, 8, 106, 607, 624, 35, 534, 6, 227, 7, 129, 113]),\n",
              "       ...,\n",
              "       list([1, 11, 6, 230, 245, 6401, 9, 6, 1225, 446, 2, 45, 2174, 84, 8322, 4007, 21, 4, 912, 84, 2, 325, 725, 134, 2, 1715, 84, 5, 36, 28, 57, 1099, 21, 8, 140, 8, 703, 5, 2, 84, 56, 18, 1644, 14, 9, 31, 7, 4, 9406, 1209, 2295, 2, 1008, 18, 6, 20, 207, 110, 563, 12, 8, 2901, 2, 8, 97, 6, 20, 53, 4767, 74, 4, 460, 364, 1273, 29, 270, 11, 960, 108, 45, 40, 29, 2961, 395, 11, 6, 4065, 500, 7, 2, 89, 364, 70, 29, 140, 4, 64, 4780, 11, 4, 2678, 26, 178, 4, 529, 443, 2, 5, 27, 710, 117, 2, 8123, 165, 47, 84, 37, 131, 818, 14, 595, 10, 10, 61, 1242, 1209, 10, 10, 288, 2260, 1702, 34, 2901, 2, 4, 65, 496, 4, 231, 7, 790, 5, 6, 320, 234, 2766, 234, 1119, 1574, 7, 496, 4, 139, 929, 2901, 2, 7750, 5, 4241, 18, 4, 8497, 2, 250, 11, 1818, 7561, 4, 4217, 5408, 747, 1115, 372, 1890, 1006, 541, 9303, 7, 4, 59, 2, 4, 3586, 2]),\n",
              "       list([1, 1446, 7079, 69, 72, 3305, 13, 610, 930, 8, 12, 582, 23, 5, 16, 484, 685, 54, 349, 11, 4120, 2959, 45, 58, 1466, 13, 197, 12, 16, 43, 23, 2, 5, 62, 30, 145, 402, 11, 4131, 51, 575, 32, 61, 369, 71, 66, 770, 12, 1054, 75, 100, 2198, 8, 4, 105, 37, 69, 147, 712, 75, 3543, 44, 257, 390, 5, 69, 263, 514, 105, 50, 286, 1814, 23, 4, 123, 13, 161, 40, 5, 421, 4, 116, 16, 897, 13, 2, 40, 319, 5872, 112, 6700, 11, 4803, 121, 25, 70, 3468, 4, 719, 3798, 13, 18, 31, 62, 40, 8, 7200, 4, 2, 7, 14, 123, 5, 942, 25, 8, 721, 12, 145, 5, 202, 12, 160, 580, 202, 12, 6, 52, 58, 2, 92, 401, 728, 12, 39, 14, 251, 8, 15, 251, 5, 2, 12, 38, 84, 80, 124, 12, 9, 23]),\n",
              "       list([1, 17, 6, 194, 337, 7, 4, 204, 22, 45, 254, 8, 106, 14, 123, 4, 2, 270, 2, 5, 2, 2, 732, 2098, 101, 405, 39, 14, 1034, 4, 1310, 9, 115, 50, 305, 12, 47, 4, 168, 5, 235, 7, 38, 111, 699, 102, 7, 4, 4039, 9245, 9, 24, 6, 78, 1099, 17, 2345, 2, 21, 27, 9685, 6139, 5, 2, 1603, 92, 1183, 4, 1310, 7, 4, 204, 42, 97, 90, 35, 221, 109, 29, 127, 27, 118, 8, 97, 12, 157, 21, 6789, 2, 9, 6, 66, 78, 1099, 4, 631, 1191, 5, 2642, 272, 191, 1070, 6, 7585, 8, 2197, 2, 2, 544, 5, 383, 1271, 848, 1468, 2, 497, 2, 8, 1597, 8778, 2, 21, 60, 27, 239, 9, 43, 8368, 209, 405, 10, 10, 12, 764, 40, 4, 248, 20, 12, 16, 5, 174, 1791, 72, 7, 51, 6, 1739, 22, 4, 204, 131, 9])],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "X_train"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "id": "9ec2a2f6",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9ec2a2f6",
        "outputId": "c99ea327-9359-45a5-8151-919017b50798"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 0, 0, ..., 0, 1, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "y_train"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "id": "8c0442f2",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8c0442f2",
        "outputId": "de2a6d24-0825-46d6-aea0-7ff663d56fe3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "리뷰의 최대 길이 : 2494\n",
            "리뷰의 평균 길이 : 238.71364\n"
          ]
        }
      ],
      "source": [
        "print('리뷰의 최대 길이 : {}'.format(max(len(l) for l in X_train)))\n",
        "print('리뷰의 평균 길이 : {}'.format(sum(map(len, X_train))/len(X_train)))"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1e866b10",
      "metadata": {
        "id": "1e866b10"
      },
      "source": [
        "### 실습 1. Train, Test data 확인"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "id": "6eb878d9",
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6eb878d9",
        "outputId": "12747d8b-88d2-4dfc-c987-55e7ee324ca2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([list([1, 591, 202, 14, 31, 6, 717, 10, 10, 2, 2, 5, 4, 360, 7, 4, 177, 5760, 394, 354, 4, 123, 9, 1035, 1035, 1035, 10, 10, 13, 92, 124, 89, 488, 7944, 100, 28, 1668, 14, 31, 23, 27, 7479, 29, 220, 468, 8, 124, 14, 286, 170, 8, 157, 46, 5, 27, 239, 16, 179, 2, 38, 32, 25, 7944, 451, 202, 14, 6, 717]),\n",
              "       list([1, 14, 22, 3443, 6, 176, 7, 5063, 88, 12, 2679, 23, 1310, 5, 109, 943, 4, 114, 9, 55, 606, 5, 111, 7, 4, 139, 193, 273, 23, 4, 172, 270, 11, 7216, 2, 4, 8463, 2801, 109, 1603, 21, 4, 22, 3861, 8, 6, 1193, 1330, 10, 10, 4, 105, 987, 35, 841, 2, 19, 861, 1074, 5, 1987, 2, 45, 55, 221, 15, 670, 5304, 526, 14, 1069, 4, 405, 5, 2438, 7, 27, 85, 108, 131, 4, 5045, 5304, 3884, 405, 9, 3523, 133, 5, 50, 13, 104, 51, 66, 166, 14, 22, 157, 9, 4, 530, 239, 34, 8463, 2801, 45, 407, 31, 7, 41, 3778, 105, 21, 59, 299, 12, 38, 950, 5, 4521, 15, 45, 629, 488, 2733, 127, 6, 52, 292, 17, 4, 6936, 185, 132, 1988, 5304, 1799, 488, 2693, 47, 6, 392, 173, 4, 2, 4378, 270, 2352, 4, 1500, 7, 4, 65, 55, 73, 11, 346, 14, 20, 9, 6, 976, 2078, 7, 5293, 861, 2, 5, 4182, 30, 3127, 2, 56, 4, 841, 5, 990, 692, 8, 4, 1669, 398, 229, 10, 10, 13, 2822, 670, 5304, 14, 9, 31, 7, 27, 111, 108, 15, 2033, 19, 7836, 1429, 875, 551, 14, 22, 9, 1193, 21, 45, 4829, 5, 45, 252, 8, 2, 6, 565, 921, 3639, 39, 4, 529, 48, 25, 181, 8, 67, 35, 1732, 22, 49, 238, 60, 135, 1162, 14, 9, 290, 4, 58, 10, 10, 472, 45, 55, 878, 8, 169, 11, 374, 5687, 25, 203, 28, 8, 818, 12, 125, 4, 3077]),\n",
              "       list([1, 111, 748, 4368, 1133, 2, 2, 4, 87, 1551, 1262, 7, 31, 318, 9459, 7, 4, 498, 5076, 748, 63, 29, 5161, 220, 686, 2, 5, 17, 12, 575, 220, 2507, 17, 6, 185, 132, 2, 16, 53, 928, 11, 2, 74, 4, 438, 21, 27, 2, 589, 8, 22, 107, 2, 2, 997, 1638, 8, 35, 2076, 9019, 11, 22, 231, 54, 29, 1706, 29, 100, 2, 2425, 34, 2, 8738, 2, 5, 2, 98, 31, 2122, 33, 6, 58, 14, 3808, 1638, 8, 4, 365, 7, 2789, 3761, 356, 346, 4, 2, 1060, 63, 29, 93, 11, 5421, 11, 2, 33, 6, 58, 54, 1270, 431, 748, 7, 32, 2580, 16, 11, 94, 2, 10, 10, 4, 993, 2, 7, 4, 1766, 2634, 2164, 2, 8, 847, 8, 1450, 121, 31, 7, 27, 86, 2663, 2, 16, 6, 465, 993, 2006, 2, 573, 17, 2, 42, 4, 2, 37, 473, 6, 711, 6, 8869, 7, 328, 212, 70, 30, 258, 11, 220, 32, 7, 108, 21, 133, 12, 9, 55, 465, 849, 3711, 53, 33, 2071, 1969, 37, 70, 1144, 4, 5940, 1409, 74, 476, 37, 62, 91, 1329, 169, 4, 1330, 2, 146, 655, 2212, 5, 258, 12, 184, 2, 546, 5, 849, 2, 7, 4, 22, 1436, 18, 631, 1386, 797, 7, 4, 8712, 71, 348, 425, 4320, 1061, 19, 2, 5, 2, 11, 661, 8, 339, 2, 4, 2455, 2, 7, 4, 1962, 10, 10, 263, 787, 9, 270, 11, 6, 9466, 4, 2, 2, 121, 4, 5437, 26, 4434, 19, 68, 1372, 5, 28, 446, 6, 318, 7149, 8, 67, 51, 36, 70, 81, 8, 4392, 2294, 36, 1197, 8, 2, 2, 18, 6, 711, 4, 9909, 26, 2, 1125, 11, 14, 636, 720, 12, 426, 28, 77, 776, 8, 97, 38, 111, 7489, 6175, 168, 1239, 5189, 137, 2, 18, 27, 173, 9, 2399, 17, 6, 2, 428, 2, 232, 11, 4, 8014, 37, 272, 40, 2708, 247, 30, 656, 6, 2, 54, 2, 3292, 98, 6, 2840, 40, 558, 37, 6093, 98, 4, 2, 1197, 15, 14, 9, 57, 4893, 5, 4659, 6, 275, 711, 7937, 2, 3292, 98, 6, 2, 10, 10, 6639, 19, 14, 2, 267, 162, 711, 37, 5900, 752, 98, 4, 2, 2378, 90, 19, 6, 2, 7, 2, 1810, 2, 4, 4770, 3183, 930, 8, 508, 90, 4, 1317, 8, 4, 2, 17, 2, 3965, 1853, 4, 1494, 8, 4468, 189, 4, 2, 6287, 5774, 4, 4770, 5, 95, 271, 23, 6, 7742, 6063, 2, 5437, 33, 1526, 6, 425, 3155, 2, 4535, 1636, 7, 4, 4669, 2, 469, 4, 4552, 54, 4, 150, 5664, 2, 280, 53, 2, 2, 18, 339, 29, 1978, 27, 7885, 5, 2, 68, 1830, 19, 6571, 2, 4, 1515, 7, 263, 65, 2132, 34, 6, 5680, 7489, 43, 159, 29, 9, 4706, 9, 387, 73, 195, 584, 10, 10, 1069, 4, 58, 810, 54, 14, 6078, 117, 22, 16, 93, 5, 1069, 4, 192, 15, 12, 16, 93, 34, 6, 1766, 2, 33, 4, 5673, 7, 15, 2, 9252, 3286, 325, 12, 62, 30, 776, 8, 67, 14, 17, 6, 2, 44, 148, 687, 2, 203, 42, 203, 24, 28, 69, 2, 6676, 11, 330, 54, 29, 93, 2, 21, 845, 2, 27, 1099, 7, 819, 4, 22, 1407, 17, 6, 2, 787, 7, 2460, 2, 2, 100, 30, 4, 3737, 3617, 3169, 2321, 42, 1898, 11, 4, 3814, 42, 101, 704, 7, 101, 999, 15, 1625, 94, 2926, 180, 5, 9, 9101, 34, 2, 45, 6, 1429, 22, 60, 6, 1220, 31, 11, 94, 6408, 96, 21, 94, 749, 9, 57, 975]),\n",
              "       ...,\n",
              "       list([1, 13, 1408, 15, 8, 135, 14, 9, 35, 32, 46, 394, 20, 62, 30, 5093, 21, 45, 184, 78, 4, 1492, 910, 769, 2290, 2515, 395, 4257, 5, 1454, 11, 119, 2, 89, 1036, 4, 116, 218, 78, 21, 407, 100, 30, 128, 262, 15, 7, 185, 2280, 284, 1842, 2, 37, 315, 4, 226, 20, 272, 2942, 40, 29, 152, 60, 181, 8, 30, 50, 553, 362, 80, 119, 12, 21, 846, 5518]),\n",
              "       list([1, 11, 119, 241, 9, 4, 840, 20, 12, 468, 15, 94, 3684, 562, 791, 39, 4, 86, 107, 8, 97, 14, 31, 33, 4, 2960, 7, 743, 46, 1028, 9, 3531, 5, 4, 768, 47, 8, 79, 90, 145, 164, 162, 50, 6, 501, 119, 7, 9, 4, 78, 232, 15, 16, 224, 11, 4, 333, 20, 4, 985, 200, 5, 2, 5, 9, 1861, 8, 79, 357, 4, 20, 47, 220, 57, 206, 139, 11, 12, 5, 55, 117, 212, 13, 1276, 92, 124, 51, 45, 1188, 71, 536, 13, 520, 14, 20, 6, 2302, 7, 470]),\n",
              "       list([1, 6, 52, 7465, 430, 22, 9, 220, 2594, 8, 28, 2, 519, 3227, 6, 769, 15, 47, 6, 3482, 4067, 8, 114, 5, 33, 222, 31, 55, 184, 704, 5586, 2, 19, 346, 3153, 5, 6, 364, 350, 4, 184, 5586, 9, 133, 1810, 11, 5417, 2, 21, 4, 7298, 2, 570, 50, 2005, 2643, 9, 6, 1249, 17, 6, 2, 2, 21, 17, 6, 1211, 232, 1138, 2249, 29, 266, 56, 96, 346, 194, 308, 9, 194, 21, 29, 218, 1078, 19, 4, 78, 173, 7, 27, 2, 5698, 3406, 718, 2, 9, 6, 6907, 17, 210, 5, 3281, 5677, 47, 77, 395, 14, 172, 173, 18, 2740, 2931, 4517, 82, 127, 27, 173, 11, 6, 392, 217, 21, 50, 9, 57, 65, 12, 2, 53, 40, 35, 390, 7, 11, 4, 3567, 7, 4, 314, 74, 6, 792, 22, 2, 19, 714, 727, 5205, 382, 4, 91, 6533, 439, 19, 14, 20, 9, 1441, 5805, 1118, 4, 756, 25, 124, 4, 31, 12, 16, 93, 804, 34, 2005, 2643])],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "X_test"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "id": "f6af81f9",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f6af81f9",
        "outputId": "5f963a00-4c18-4203-bce7-34355f1c80c3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1, 1, ..., 0, 0, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "y_test"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "91baeadb",
      "metadata": {
        "id": "91baeadb"
      },
      "outputs": [],
      "source": [
        ""
      ]
    },
    {
      "cell_type": "markdown",
      "id": "eda67418",
      "metadata": {
        "id": "eda67418"
      },
      "source": [
        "### 실습 2. max_len 정하고 나머지는 padding 처리"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "id": "d0768fc4",
      "metadata": {
        "id": "d0768fc4"
      },
      "outputs": [],
      "source": [
        "#1) max_len 정의\n",
        "max_len = 500\n",
        "\n",
        "X_train = pad_sequences(X_train, maxlen=max_len)\n",
        "X_test = pad_sequences(X_test, maxlen=max_len)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "id": "5244cce7",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5244cce7",
        "outputId": "916d46f3-520e-4109-d5e2-8003d8a8d9cd"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[   0,    0,    0, ...,   19,  178,   32],\n",
              "       [   0,    0,    0, ...,   16,  145,   95],\n",
              "       [   0,    0,    0, ...,    7,  129,  113],\n",
              "       ...,\n",
              "       [   0,    0,    0, ...,    4, 3586,    2],\n",
              "       [   0,    0,    0, ...,   12,    9,   23],\n",
              "       [   0,    0,    0, ...,  204,  131,    9]], dtype=int32)"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "X_train"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "id": "7d3d0b84",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7d3d0b84",
        "outputId": "dd3f05ba-0ee2-4398-b753-38185ddca990"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[   0,    0,    0, ...,   14,    6,  717],\n",
              "       [   0,    0,    0, ...,  125,    4, 3077],\n",
              "       [  33,    6,   58, ...,    9,   57,  975],\n",
              "       ...,\n",
              "       [   0,    0,    0, ...,   21,  846, 5518],\n",
              "       [   0,    0,    0, ..., 2302,    7,  470],\n",
              "       [   0,    0,    0, ...,   34, 2005, 2643]], dtype=int32)"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "X_test"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "id": "381cd56b",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "381cd56b",
        "outputId": "6431fcf1-f05c-46b8-ef92-c757e5bb12a9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_train : (25000, 500)\n",
            "y_train : (25000,)\n",
            "X_test :  (25000, 500)\n",
            "y_test :  (25000,)\n"
          ]
        }
      ],
      "source": [
        "print('X_train :', X_train.shape)\n",
        "print('y_train :', y_train.shape)\n",
        "print('X_test : ', X_test.shape)\n",
        "print('y_test : ', y_test.shape)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3d718b9f",
      "metadata": {
        "id": "3d718b9f"
      },
      "source": [
        "### 실습 3. GPU 확인"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "id": "ee73b664",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ee73b664",
        "outputId": "04db371c-b5ac-4e9d-d365-fedebb8106d8"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[name: \"/device:CPU:0\"\n",
              " device_type: \"CPU\"\n",
              " memory_limit: 268435456\n",
              " locality {\n",
              " }\n",
              " incarnation: 13537033401006417257\n",
              " xla_global_id: -1, name: \"/device:GPU:0\"\n",
              " device_type: \"GPU\"\n",
              " memory_limit: 11320098816\n",
              " locality {\n",
              "   bus_id: 1\n",
              "   links {\n",
              "   }\n",
              " }\n",
              " incarnation: 15631834743627114580\n",
              " physical_device_desc: \"device: 0, name: Tesla K80, pci bus id: 0000:00:04.0, compute capability: 3.7\"\n",
              " xla_global_id: 416903419]"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "from tensorflow.python.client import device_lib\n",
        "device_lib.list_local_devices()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "id": "4eef5467",
      "metadata": {
        "id": "4eef5467"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "gpus = tf.config.list_physical_devices('GPU')\n",
        "if gpus:\n",
        "    for gpu in gpus:\n",
        "        tf.config.experimental.set_memory_growth(gpu, True)\n",
        "\n",
        "from tensorflow.keras.layers import Dense, Embedding, Bidirectional, LSTM, Concatenate, Dropout\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras import Input, Model\n",
        "from tensorflow.keras import optimizers\n",
        "import os\n",
        "\n",
        "from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "id": "14cb6810",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "14cb6810",
        "outputId": "2777b2d0-142d-4c2d-f966-3149da996a8b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "gpus"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d53844bf",
      "metadata": {
        "id": "d53844bf"
      },
      "source": [
        "### 실습 4. 모델 정의 \n",
        "\n",
        "1) Sequential 사용   \n",
        "2) 10,000개의 단어들을 128차원의 벡터로 임베딩하도록 설계, input_length는 max_len으로 제한   \n",
        "3) LSTM에 Bidirectional RNN 적용, 64개의 네트워크 층으로 설계   \n",
        "4) Dropout 50%로 과적합 방지   \n",
        "5) 활성화함수(sigmoid) 사용하여 출력층 설계 - 이진분류\n",
        "\n",
        "https://www.tensorflow.org/api_docs/python/tf/keras/layers/Bidirectional"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "id": "a2dbd4b2",
      "metadata": {
        "id": "a2dbd4b2"
      },
      "outputs": [],
      "source": [
        "model = Sequential()\n",
        "model.add(Embedding(vocab_size, 128, input_length=max_len))\n",
        "model.add(Bidirectional(LSTM(64)))\n",
        "model.add(Dropout(.5))\n",
        "model.add(tf.keras.layers.Dense(1, activation='sigmoid'))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "id": "1ac134a3",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1ac134a3",
        "outputId": "464672dc-062d-4a24-f7ba-3c6a5414af99"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " embedding (Embedding)       (None, 500, 128)          1280000   \n",
            "                                                                 \n",
            " bidirectional (Bidirectiona  (None, 128)              98816     \n",
            " l)                                                              \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 128)               0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 1)                 129       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 1,378,945\n",
            "Trainable params: 1,378,945\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "model.summary()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b3ed6fd3",
      "metadata": {
        "id": "b3ed6fd3"
      },
      "source": [
        "### 실습 5. 모델 컴파일\n",
        "- loss : binary_crossentropy\n",
        "- adam으로 최적화\n",
        "- 정확도로 성능 평가"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "id": "815eeda5",
      "metadata": {
        "id": "815eeda5"
      },
      "outputs": [],
      "source": [
        "model.compile(loss='binary_crossentropy', optimizer= 'adam', metrics=['acc'])"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1aa679b4",
      "metadata": {
        "id": "1aa679b4"
      },
      "source": [
        "### 실습 6. 모델 학습\n",
        "- 30 epochs\n",
        "- batch_size 설정 : 256\n",
        "- validation data는 어떻게 할건지? (현재 Train, Test만 있음)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "id": "876118c5",
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "876118c5",
        "outputId": "e88e0f49-64f0-435d-916b-8623930e33f7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/30\n",
            "84/84 [==============================] - 26s 217ms/step - loss: 0.5353 - acc: 0.7125 - val_loss: 0.3519 - val_acc: 0.8528\n",
            "Epoch 2/30\n",
            "84/84 [==============================] - 17s 204ms/step - loss: 0.2696 - acc: 0.8991 - val_loss: 0.3534 - val_acc: 0.8685\n",
            "Epoch 3/30\n",
            "84/84 [==============================] - 17s 205ms/step - loss: 0.1926 - acc: 0.9325 - val_loss: 0.3004 - val_acc: 0.8765\n",
            "Epoch 4/30\n",
            "84/84 [==============================] - 17s 205ms/step - loss: 0.1464 - acc: 0.9507 - val_loss: 0.3816 - val_acc: 0.8643\n",
            "Epoch 5/30\n",
            "84/84 [==============================] - 17s 203ms/step - loss: 0.1248 - acc: 0.9587 - val_loss: 0.3754 - val_acc: 0.8675\n",
            "Epoch 6/30\n",
            "84/84 [==============================] - 17s 204ms/step - loss: 0.0942 - acc: 0.9693 - val_loss: 0.5554 - val_acc: 0.8597\n",
            "Epoch 7/30\n",
            "84/84 [==============================] - 17s 205ms/step - loss: 0.1833 - acc: 0.9328 - val_loss: 0.3874 - val_acc: 0.8544\n",
            "Epoch 8/30\n",
            "84/84 [==============================] - 17s 204ms/step - loss: 0.1031 - acc: 0.9662 - val_loss: 0.4626 - val_acc: 0.8675\n",
            "Epoch 9/30\n",
            "84/84 [==============================] - 17s 205ms/step - loss: 0.0590 - acc: 0.9824 - val_loss: 0.5046 - val_acc: 0.8627\n",
            "Epoch 10/30\n",
            "84/84 [==============================] - 17s 204ms/step - loss: 0.0400 - acc: 0.9890 - val_loss: 0.6133 - val_acc: 0.8672\n",
            "Epoch 11/30\n",
            "84/84 [==============================] - 17s 204ms/step - loss: 0.0392 - acc: 0.9902 - val_loss: 0.5626 - val_acc: 0.8611\n",
            "Epoch 12/30\n",
            "84/84 [==============================] - 17s 205ms/step - loss: 0.0384 - acc: 0.9892 - val_loss: 0.6118 - val_acc: 0.8437\n",
            "Epoch 13/30\n",
            "84/84 [==============================] - 17s 204ms/step - loss: 0.0338 - acc: 0.9907 - val_loss: 0.6067 - val_acc: 0.8552\n",
            "Epoch 14/30\n",
            "84/84 [==============================] - 17s 203ms/step - loss: 0.0378 - acc: 0.9888 - val_loss: 0.5758 - val_acc: 0.8563\n",
            "Epoch 15/30\n",
            "84/84 [==============================] - 17s 203ms/step - loss: 0.0479 - acc: 0.9867 - val_loss: 0.5156 - val_acc: 0.8565\n",
            "Epoch 16/30\n",
            "84/84 [==============================] - 17s 204ms/step - loss: 0.0650 - acc: 0.9801 - val_loss: 0.5835 - val_acc: 0.8621\n",
            "Epoch 17/30\n",
            "84/84 [==============================] - 17s 203ms/step - loss: 0.0434 - acc: 0.9884 - val_loss: 0.6521 - val_acc: 0.8589\n",
            "Epoch 18/30\n",
            "84/84 [==============================] - 17s 203ms/step - loss: 0.0356 - acc: 0.9909 - val_loss: 0.7550 - val_acc: 0.8408\n",
            "Epoch 19/30\n",
            "84/84 [==============================] - 17s 202ms/step - loss: 0.0424 - acc: 0.9878 - val_loss: 0.6965 - val_acc: 0.8376\n",
            "Epoch 20/30\n",
            "84/84 [==============================] - 17s 203ms/step - loss: 0.0176 - acc: 0.9961 - val_loss: 0.7461 - val_acc: 0.8576\n",
            "Epoch 21/30\n",
            "84/84 [==============================] - 17s 204ms/step - loss: 0.0123 - acc: 0.9973 - val_loss: 0.7755 - val_acc: 0.8608\n",
            "Epoch 22/30\n",
            "84/84 [==============================] - 17s 204ms/step - loss: 0.0311 - acc: 0.9910 - val_loss: 0.7212 - val_acc: 0.8507\n",
            "Epoch 23/30\n",
            "84/84 [==============================] - 17s 203ms/step - loss: 0.1539 - acc: 0.9439 - val_loss: 0.5809 - val_acc: 0.8611\n",
            "Epoch 24/30\n",
            "84/84 [==============================] - 17s 203ms/step - loss: 0.0297 - acc: 0.9919 - val_loss: 0.6342 - val_acc: 0.8539\n",
            "Epoch 25/30\n",
            "84/84 [==============================] - 17s 203ms/step - loss: 0.0457 - acc: 0.9861 - val_loss: 0.6641 - val_acc: 0.8488\n",
            "Epoch 26/30\n",
            "84/84 [==============================] - 17s 204ms/step - loss: 0.0204 - acc: 0.9944 - val_loss: 0.7032 - val_acc: 0.8517\n",
            "Epoch 27/30\n",
            "84/84 [==============================] - 17s 204ms/step - loss: 0.0118 - acc: 0.9978 - val_loss: 0.7709 - val_acc: 0.8533\n",
            "Epoch 28/30\n",
            "84/84 [==============================] - 17s 203ms/step - loss: 0.0053 - acc: 0.9992 - val_loss: 0.8661 - val_acc: 0.8573\n",
            "Epoch 29/30\n",
            "84/84 [==============================] - 17s 203ms/step - loss: 0.0070 - acc: 0.9991 - val_loss: 0.8142 - val_acc: 0.8488\n",
            "Epoch 30/30\n",
            "84/84 [==============================] - 17s 204ms/step - loss: 0.0053 - acc: 0.9990 - val_loss: 0.8655 - val_acc: 0.8491\n"
          ]
        }
      ],
      "source": [
        "history = model.fit(X_train, y_train, epochs=30, batch_size=256, validation_split=0.15)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "id": "2567867b",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "2567867b",
        "outputId": "0c1c00da-34df-4d86-d193-0fa50158f502"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plot_graphs(history, 'acc')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "id": "01a33a2a",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "01a33a2a",
        "outputId": "7f171e67-20c5-418b-b053-ef9a1e594bf3"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plot_graphs(history, 'loss')"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "516954fd",
      "metadata": {
        "id": "516954fd"
      },
      "source": [
        "### 실습 7. 콜백 함수\n",
        "- Earlystopping, Checkpoint\n",
        "- 모델 저장 및 불러오기\n",
        "\n",
        "https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/EarlyStopping\n",
        "\n",
        "https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/ModelCheckpoint"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model2 = Sequential()\n",
        "model2.add(Embedding(vocab_size, 128, input_length=max_len))\n",
        "model2.add(Bidirectional(LSTM(64)))\n",
        "model2.add(Dropout(.5))\n",
        "model2.add(tf.keras.layers.Dense(1, activation='sigmoid'))"
      ],
      "metadata": {
        "id": "UJmO_73D4o0A"
      },
      "id": "UJmO_73D4o0A",
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model2.compile(loss='binary_crossentropy', optimizer= 'adam', metrics=['acc'])"
      ],
      "metadata": {
        "id": "tg9JKdmF4qcU"
      },
      "id": "tg9JKdmF4qcU",
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "t3cSBY-Y4uRb"
      },
      "id": "t3cSBY-Y4uRb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "id": "68da9ee7",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "68da9ee7",
        "outputId": "25510a82-c4e7-4f7f-9e29-b4c0d80404a6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/30\n",
            "84/84 [==============================] - 22s 215ms/step - loss: 0.5385 - acc: 0.7266 - val_loss: 0.3754 - val_acc: 0.8411\n",
            "Epoch 2/30\n",
            "84/84 [==============================] - 17s 205ms/step - loss: 0.2839 - acc: 0.8896 - val_loss: 0.3113 - val_acc: 0.8765\n",
            "Epoch 3/30\n",
            "84/84 [==============================] - 17s 206ms/step - loss: 0.1991 - acc: 0.9296 - val_loss: 0.3016 - val_acc: 0.8835\n",
            "Epoch 4/30\n",
            "84/84 [==============================] - 17s 204ms/step - loss: 0.1552 - acc: 0.9459 - val_loss: 0.3248 - val_acc: 0.8637\n",
            "Epoch 5/30\n",
            "84/84 [==============================] - 17s 204ms/step - loss: 0.1292 - acc: 0.9570 - val_loss: 0.3602 - val_acc: 0.8749\n",
            "Epoch 6/30\n",
            "84/84 [==============================] - 17s 203ms/step - loss: 0.0954 - acc: 0.9692 - val_loss: 0.5062 - val_acc: 0.8368\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ],
      "source": [
        "early_callback = EarlyStopping(monitor='val_loss', patience=3)\n",
        "model_filepath = 'model_best.hdf5'\n",
        "model_checkpoint_callback = ModelCheckpoint(filepath=model_filepath, monitor='val_loss', save_best_only=True)\n",
        "history=model2.fit(X_train, y_train, epochs=30, batch_size=256, validation_split=0.15, callbacks=[early_callback, model_checkpoint_callback])\n",
        "len(history.history['val_loss'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "id": "53bcc618",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "53bcc618",
        "outputId": "d4aa4cf5-d2cf-474e-ac37-17b518db3a4d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "98/98 [==============================] - 6s 65ms/step - loss: 0.5153 - acc: 0.8311\n"
          ]
        }
      ],
      "source": [
        "results = model2.evaluate(X_test, y_test, batch_size=256)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "id": "54457c48",
      "metadata": {
        "id": "54457c48"
      },
      "outputs": [],
      "source": [
        "from tensorflow import keras \n",
        "reloading_model = keras.models.load_model('model_best.hdf5')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "reloading_results = reloading_model.evaluate(X_test, y_test, batch_size=256)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d8kDe_HC7Vgg",
        "outputId": "7c885c41-acfd-4bfc-9ca0-ee08a5b89c35"
      },
      "id": "d8kDe_HC7Vgg",
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "98/98 [==============================] - 7s 65ms/step - loss: 0.3124 - acc: 0.8752\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "id": "8135a8e5",
      "metadata": {
        "id": "8135a8e5"
      },
      "outputs": [],
      "source": [
        "model3 = Sequential()\n",
        "model3.add(Embedding(vocab_size, 128, input_length=max_len))\n",
        "model3.add(Bidirectional(LSTM(64)))\n",
        "model3.add(Dropout(.5))\n",
        "model3.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n",
        "model3.compile(loss='binary_crossentropy', optimizer= 'adam', metrics=['acc'])"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model_filepath = 'model_test.hdf5'\n",
        "test_checkpoint_callback = ModelCheckpoint(filepath=model_filepath, monitor='val_loss', save_best_only=True)\n",
        "history=model3.fit(X_train, y_train, epochs=3, batch_size=256, validation_split=0.15, callbacks=[test_checkpoint_callback])\n",
        "len(history.history['val_loss'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7b2me1_b8pH5",
        "outputId": "5592f4c7-3dbc-4a63-87d8-7dd8b8a26baf"
      },
      "id": "7b2me1_b8pH5",
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/3\n",
            "84/84 [==============================] - 64s 215ms/step - loss: 0.5733 - acc: 0.6988 - val_loss: 0.3455 - val_acc: 0.8549\n",
            "Epoch 2/3\n",
            "84/84 [==============================] - 17s 207ms/step - loss: 0.3255 - acc: 0.8697 - val_loss: 0.3189 - val_acc: 0.8704\n",
            "Epoch 3/3\n",
            "84/84 [==============================] - 17s 206ms/step - loss: 0.2088 - acc: 0.9239 - val_loss: 0.3169 - val_acc: 0.8651\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "id": "7a4fe8a6",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7a4fe8a6",
        "outputId": "61e90265-0f48-45e5-b300-735f152be8ca"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "98/98 [==============================] - 8s 69ms/step - loss: 0.3214 - acc: 0.8670\n"
          ]
        }
      ],
      "source": [
        "test_reload_model = keras.models.load_model('model_test.hdf5')\n",
        "test_reload_results = test_reload_model.evaluate(X_test, y_test, batch_size=256)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "id": "4abf5222",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4abf5222",
        "outputId": "ccc08881-54cb-44e4-9dbe-978af5000ba4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "98/98 [==============================] - 7s 69ms/step - loss: 0.3214 - acc: 0.8670\n"
          ]
        }
      ],
      "source": [
        "model3_results = model3.evaluate(X_test, y_test, batch_size=256)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1322ae8d",
      "metadata": {
        "id": "1322ae8d"
      },
      "outputs": [],
      "source": [
        ""
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.13"
    },
    "colab": {
      "name": "실습용) IMDB_Bi-LSTM_GPU.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 5
}